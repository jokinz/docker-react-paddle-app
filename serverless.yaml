org: belocode
app: bohemia-padel-services
service: back-office-website

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: live
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:PutObject"
        - "s3:GetObject"
        - "s3:ListBucket"
        - "s3:DeleteObject"
      Resource:
        - "arn:aws:s3:::${self:app}-${self:service}-${opt:stage, self:provider.stage}"
        - "arn:aws:s3:::${self:app}-${self:service}-${opt:stage, self:provider.stage}/*"

stages:
  default:
    observability: false
    params:
      domain: admin.bohemiapadel.com
      hostedZoneId: Z09119152FRN5N5NC8UHW
      certificate: f7f8e744-0bd5-4f6a-be9e-780f234747bf

resources:
  Resources:
    WebsiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:app}-${self:service}-${opt:stage, self:provider.stage}
        AccessControl: Private
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: index.html

    CloudFrontOAI:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: "OAI for public-website-live CloudFront distribution"

    WebsiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: { "Ref": "WebsiteBucket" }
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                CanonicalUser:
                  { "Fn::GetAtt": ["CloudFrontOAI", "S3CanonicalUserId"] }
              Action:
                - s3:GetObject
              Resource:
                - "arn:aws:s3:::${self:app}-${self:service}-${opt:stage, self:provider.stage}/*"

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - DomainName: { "Fn::GetAtt": ["WebsiteBucket", "DomainName"] }
              Id: S3Origin
              S3OriginConfig:
                OriginAccessIdentity:
                  {
                    "Fn::Join":
                      [
                        "",
                        [
                          "origin-access-identity/cloudfront/",
                          { "Ref": "CloudFrontOAI" },
                        ],
                      ],
                  }
          Enabled: true
          DefaultCacheBehavior:
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
          DefaultRootObject: index.html
          Aliases:
            - ${param:domain}
          ViewerCertificate:
            AcmCertificateArn: arn:aws:acm:${self:provider.region}:${aws:accountId}:certificate/${param:certificate}
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          CustomErrorResponses:
            - ErrorCode: 404
              ResponsePagePath: /index.html
              ResponseCode: 200
              ErrorCachingMinTTL: 0

    WebsiteDNSRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: ${param:hostedZoneId}
        Name: ${param:domain}
        Type: A
        AliasTarget:
          DNSName: { "Fn::GetAtt": ["CloudFrontDistribution", "DomainName"] }
          HostedZoneId: "Z2FDTNDATAQYW2"

plugins:
  - serverless-s3-sync

custom:
  s3Sync:
    - bucketName: ${self:app}-${self:service}-${opt:stage, self:provider.stage}
      localDir: public